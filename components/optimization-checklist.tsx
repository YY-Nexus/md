"use client"

import { useState } from "react"
import { Check, ChevronDown, ChevronUp, Info } from "lucide-react"

interface ChecklistItem {
  id: string
  category: string
  title: string
  description: string
  difficulty: "ÁÆÄÂçï" | "‰∏≠Á≠â" | "È´òÁ∫ß"
  impact: "‰Ωé" | "‰∏≠" | "È´ò"
  completed: boolean
}

export function OptimizationChecklist() {
  const [expandedCategory, setExpandedCategory] = useState<string | null>("system")
  const [items, setItems] = useState<ChecklistItem[]>([
    // Á≥ªÁªü‰ºòÂåñ
    {
      id: "1",
      category: "system",
      title: "ÂÖ≥Èó≠‰∏çÂøÖË¶ÅÁöÑÂêØÂä®È°π",
      description: "Âú®Á≥ªÁªüËÆæÁΩÆ > Áî®Êà∑‰∏éÁæ§ÁªÑ > ÁôªÂΩïÈ°π‰∏≠ÁßªÈô§‰∏çÂøÖË¶ÅÁöÑÂêØÂä®È°πÔºåÂáèÂ∞ëÂêéÂè∞ËøõÁ®ã„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "‰∏≠",
      completed: false,
    },
    {
      id: "2",
      category: "system",
      title: "Ê∏ÖÁêÜÊ°åÈù¢",
      description: "Ê°åÈù¢‰∏äÁöÑÊØè‰∏™ÂõæÊ†áÈÉΩ‰ºöÂç†Áî®ÂÜÖÂ≠ò„ÄÇÊï¥ÁêÜÊ°åÈù¢ÔºåÂ∞ÜÊñá‰ª∂ÁßªËá≥Êñá‰ª∂Â§π‰∏≠„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "‰Ωé",
      completed: false,
    },
    {
      id: "3",
      category: "system",
      title: "ÂÆöÊúüÈáçÂêØÁîµËÑë",
      description: "ÂÆöÊúüÈáçÂêØÂèØ‰ª•Ê∏ÖÁêÜÂÜÖÂ≠òÂíå‰∏¥Êó∂Êñá‰ª∂Ôºå‰øùÊåÅÁ≥ªÁªüÊµÅÁïÖ„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "‰∏≠",
      completed: false,
    },
    {
      id: "4",
      category: "system",
      title: "‰ΩøÁî®Ê¥ªÂä®ÁõëËßÜÂô®ËØÜÂà´ÂÜÖÂ≠òÂç†Áî®",
      description: "ÂÆöÊúüÊ£ÄÊü•Ê¥ªÂä®ÁõëËßÜÂô®ÔºåËØÜÂà´Âπ∂ÂÖ≥Èó≠Âç†Áî®Â§ßÈáèÂÜÖÂ≠òÁöÑÂ∫îÁî®„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "È´ò",
      completed: false,
    },

    // ÂºÄÂèëÁéØÂ¢É
    {
      id: "5",
      category: "dev",
      title: "‰ΩøÁî®ÂÆπÂô®ÂåñÂºÄÂèëÁéØÂ¢É",
      description: "‰ΩøÁî®DockerÈöîÁ¶ª‰∏çÂêåÈ°πÁõÆÁöÑ‰æùËµñÔºåÂáèÂ∞ëÁ≥ªÁªüÊ±°Êüì„ÄÇ",
      difficulty: "‰∏≠Á≠â",
      impact: "È´ò",
      completed: false,
    },
    {
      id: "6",
      category: "dev",
      title: "‰ºòÂåñIDEËÆæÁΩÆ",
      description: "Ë∞ÉÊï¥IDEÂÜÖÂ≠òËÆæÁΩÆÔºåÊéíÈô§Â§ßÂûãÊñá‰ª∂Â§πÔºàÂ¶Çnode_modulesÔºâÁöÑÁ¥¢Âºï„ÄÇ",
      difficulty: "‰∏≠Á≠â",
      impact: "È´ò",
      completed: false,
    },
    {
      id: "7",
      category: "dev",
      title: "‰ΩøÁî®È°πÁõÆÁâπÂÆöÁöÑËôöÊãüÁéØÂ¢É",
      description: "‰∏∫PythonÈ°πÁõÆÂàõÂª∫ËôöÊãüÁéØÂ¢ÉÔºå‰∏∫Node.jsÈ°πÁõÆ‰ΩøÁî®nvmÁÆ°ÁêÜÁâàÊú¨„ÄÇ",
      difficulty: "‰∏≠Á≠â",
      impact: "‰∏≠",
      completed: false,
    },
    {
      id: "8",
      category: "dev",
      title: "ÂÆöÊúüÊ∏ÖÁêÜÈ°πÁõÆÁºìÂ≠ò",
      description: "ÂÆöÊúüÊ∏ÖÁêÜnpmÁºìÂ≠ò„ÄÅGradleÁºìÂ≠òÁ≠âÊûÑÂª∫Â∑•ÂÖ∑ÁºìÂ≠ò„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "‰∏≠",
      completed: false,
    },

    // Â∫îÁî®Á®ãÂ∫è
    {
      id: "9",
      category: "apps",
      title: "‰ΩøÁî®Safari‰ª£ÊõøChrome",
      description: "SafariÂú®macOS‰∏äÊØîChromeÊõ¥ËäÇËÉΩÔºåÂç†Áî®ÂÜÖÂ≠òÊõ¥Â∞ë„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "‰∏≠",
      completed: false,
    },
    {
      id: "10",
      category: "apps",
      title: "ÈôêÂà∂ÂêåÊó∂ËøêË°åÁöÑÂ∫îÁî®Êï∞Èáè",
      description: "ÂÖªÊàê‰ΩøÁî®ÂÆåÂ∫îÁî®Á´ãÂç≥ÂÖ≥Èó≠ÁöÑ‰π†ÊÉØÔºåÁâπÂà´ÊòØËµÑÊ∫êÂØÜÈõÜÂûãÂ∫îÁî®„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "È´ò",
      completed: false,
    },
    {
      id: "11",
      category: "apps",
      title: "‰ΩøÁî®ËΩªÈáèÁ∫ßÂ∫îÁî®Êõø‰ª£",
      description: "‰ΩøÁî®VS Code‰ª£ÊõøÈáçÈáèÁ∫ßIDEÔºå‰ΩøÁî®Preview‰ª£ÊõøPhotoshopÂ§ÑÁêÜÁÆÄÂçïÂõæÂÉè‰ªªÂä°„ÄÇ",
      difficulty: "‰∏≠Á≠â",
      impact: "‰∏≠",
      completed: false,
    },
    {
      id: "12",
      category: "apps",
      title: "‰ºòÂåñÊµèËßàÂô®Êâ©Â±ï",
      description: "Á¶ÅÁî®‰∏çÂøÖË¶ÅÁöÑÊµèËßàÂô®Êâ©Â±ïÔºåÂÆÉ‰ª¨‰ºöÂç†Áî®Â§ßÈáèÂÜÖÂ≠ò„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "‰∏≠",
      completed: false,
    },

    // Ëá™Âä®Âåñ
    {
      id: "13",
      category: "automation",
      title: "ËÆæÁΩÆËá™Âä®Ê∏ÖÁêÜËÑöÊú¨",
      description: "ÂàõÂª∫ÂÆöÊúüËøêË°åÁöÑËÑöÊú¨ÔºåÊ∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂ÂíåÁºìÂ≠ò„ÄÇ",
      difficulty: "‰∏≠Á≠â",
      impact: "‰∏≠",
      completed: false,
    },
    {
      id: "14",
      category: "automation",
      title: "‰ΩøÁî®AutomatorËá™Âä®ÂåñÂ∑•‰ΩúÊµÅ",
      description: "ÂàõÂª∫AutomatorÂ∑•‰ΩúÊµÅËá™Âä®Â§ÑÁêÜÈáçÂ§ç‰ªªÂä°ÔºåÂ¶ÇÂõæÂÉèÂ§ÑÁêÜ„ÄÅÊñá‰ª∂Êï¥ÁêÜÁ≠â„ÄÇ",
      difficulty: "‰∏≠Á≠â",
      impact: "È´ò",
      completed: false,
    },
    {
      id: "15",
      category: "automation",
      title: "ËÆæÁΩÆÂÆöÊó∂Â§á‰ªΩ",
      description: "‰ΩøÁî®Time MachineÊàñÂÖ∂‰ªñÂ§á‰ªΩÂ∑•ÂÖ∑ÂÆöÊúüÂ§á‰ªΩÈáçË¶ÅÊï∞ÊçÆ„ÄÇ",
      difficulty: "ÁÆÄÂçï",
      impact: "È´ò",
      completed: false,
    },
    {
      id: "16",
      category: "automation",
      title: "‰ΩøÁî®HazelËá™Âä®Êï¥ÁêÜÊñá‰ª∂",
      description: "ÂÆâË£ÖHazelÂ∫îÁî®ÔºåÊ†πÊçÆËßÑÂàôËá™Âä®Êï¥ÁêÜÊñá‰ª∂Ôºå‰øùÊåÅÊñá‰ª∂Á≥ªÁªüÊï¥Ê¥Å„ÄÇ",
      difficulty: "È´òÁ∫ß",
      impact: "È´ò",
      completed: false,
    },
  ])

  const toggleCategory = (category: string) => {
    setExpandedCategory(expandedCategory === category ? null : category)
  }

  const toggleItem = (id: string) => {
    setItems(items.map((item) => (item.id === id ? { ...item, completed: !item.completed } : item)))
  }

  const categories = [
    { id: "system", name: "Á≥ªÁªü‰ºòÂåñ", icon: "üíª" },
    { id: "dev", name: "ÂºÄÂèëÁéØÂ¢É", icon: "üõ†Ô∏è" },
    { id: "apps", name: "Â∫îÁî®Á®ãÂ∫è", icon: "üì±" },
    { id: "automation", name: "Ëá™Âä®Âåñ", icon: "ü§ñ" },
  ]

  const getCompletedCount = (category: string) => {
    return items.filter((item) => item.category === category && item.completed).length
  }

  const getTotalCount = (category: string) => {
    return items.filter((item) => item.category === category).length
  }

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case "È´ò":
        return "bg-green-100 text-green-800"
      case "‰∏≠":
        return "bg-blue-100 text-blue-800"
      case "‰Ωé":
        return "bg-gray-100 text-gray-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "ÁÆÄÂçï":
        return "bg-green-100 text-green-800"
      case "‰∏≠Á≠â":
        return "bg-amber-100 text-amber-800"
      case "È´òÁ∫ß":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-xl font-semibold mb-6">iMac ‰ºòÂåñÊ∏ÖÂçï</h2>

      <div className="space-y-4">
        {categories.map((category) => (
          <div key={category.id} className="border rounded-lg overflow-hidden">
            <div
              className="flex items-center justify-between p-4 bg-gray-50 cursor-pointer"
              onClick={() => toggleCategory(category.id)}
            >
              <div className="flex items-center">
                <span className="text-xl mr-2">{category.icon}</span>
                <h3 className="font-medium">{category.name}</h3>
                <span className="ml-2 text-sm text-gray-500">
                  ({getCompletedCount(category.id)}/{getTotalCount(category.id)})
                </span>
              </div>
              <div className="flex items-center">
                <div className="w-24 h-2 bg-gray-200 rounded-full mr-3 overflow-hidden">
                  <div
                    className="h-full bg-blue-500"
                    style={{
                      width: `${(getCompletedCount(category.id) / getTotalCount(category.id)) * 100}%`,
                    }}
                  ></div>
                </div>
                {expandedCategory === category.id ? (
                  <ChevronUp className="h-5 w-5 text-gray-500" />
                ) : (
                  <ChevronDown className="h-5 w-5 text-gray-500" />
                )}
              </div>
            </div>

            {expandedCategory === category.id && (
              <div className="divide-y">
                {items
                  .filter((item) => item.category === category.id)
                  .map((item) => (
                    <div key={item.id} className="p-4">
                      <div className="flex items-start">
                        <button
                          onClick={() => toggleItem(item.id)}
                          className={`flex-shrink-0 w-6 h-6 rounded-full border flex items-center justify-center mr-3 mt-0.5 ${
                            item.completed ? "bg-blue-500 border-blue-500 text-white" : "border-gray-300"
                          }`}
                        >
                          {item.completed && <Check className="h-4 w-4" />}
                        </button>
                        <div className="flex-grow">
                          <div className="flex items-center justify-between">
                            <h4 className={`font-medium ${item.completed ? "line-through text-gray-400" : ""}`}>
                              {item.title}
                            </h4>
                            <div className="flex space-x-2">
                              <span className={`text-xs px-2 py-1 rounded-full ${getDifficultyColor(item.difficulty)}`}>
                                {item.difficulty}
                              </span>
                              <span className={`text-xs px-2 py-1 rounded-full ${getImpactColor(item.impact)}`}>
                                ÂΩ±Âìç: {item.impact}
                              </span>
                            </div>
                          </div>
                          <p className={`text-sm mt-1 ${item.completed ? "text-gray-400" : "text-gray-600"}`}>
                            {item.description}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            )}
          </div>
        ))}
      </div>

      <div className="mt-6 p-4 bg-blue-50 rounded-lg flex items-start">
        <Info className="h-5 w-5 text-blue-500 mr-2 flex-shrink-0 mt-0.5" />
        <div>
          <h4 className="font-medium text-blue-700">‰ºòÂåñÊèêÁ§∫</h4>
          <p className="text-sm text-blue-600 mt-1">
            ‰ªéÁÆÄÂçï‰ªªÂä°ÂºÄÂßãÔºåÈÄêÊ≠•ÂÆûÊñΩÊõ¥Â§çÊùÇÁöÑ‰ºòÂåñ„ÄÇÊØèÂÆåÊàê‰∏ÄÈ°πÔºåÊ£ÄÊü•Á≥ªÁªüÊÄßËÉΩÂèòÂåñ„ÄÇ
            ‰ºòÂÖàÂÆåÊàê"ÂΩ±Âìç:È´ò"ÁöÑ‰ªªÂä°ÂèØ‰ª•Ëé∑ÂæóÊúÄÊòæËëóÁöÑÊÄßËÉΩÊèêÂçá„ÄÇ
          </p>
        </div>
      </div>
    </div>
  )
}
